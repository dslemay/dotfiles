# General JavaScript Snippets
snippet clog "Console log" b
console.log($1);
endsnippet

# React Snippets
snippet rcc "React Class Component" b
import React, { Component } from 'react';
import PropTypes from 'prop-types';

class $1 extends Component {
	render() {
		return (
			<div>
				$2
			</div>
		)
	}
}

$1.propTypes = {};

export default $1;
endsnippet

snippet rnc "React Native Class Component" b
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Text, View } from 'react-native';

class $1 extends Component {
	render() {
		return (
			<View>
				<Text>New Component</Text>
			</View>
		)
	}
}

$1.propTypes = {};

export default $1;
endsnippet

snippet rfc "React Functional Component" b
import React from 'react';
import PropTypes from 'prop-types';

const $1 = () => (
	<div>
		$2
	</div>
)

export default $1;
endsnippet

snippet rnfc "React Native Functional Component" b
import React from 'react';
import PropTypes from 'prop-types';
import { Text, View } from 'react-native';

const $1 = () => (
	<View>
		<Text>New Component</Text>
	</View>
)

$1.propTypes = {};

export default $1;
endsnippet

snippet rccgql "React Class Component with GraphQL" b
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { graphql } from 'react-apollo';
import gql from 'graphql-tag';

export class $1 extends Component {
	render() {
		return (
			<div>
				$2
			</div>
		)
	}
}

$1.propTypes = {};

export default $1;
endsnippet


snippet rncgql "React Native Class Component with GraphQL" b
import React, { Component } from 'react';
import { View } from 'react-native';
import PropTypes from 'prop-types';
import { graphql } from 'react-apollo';
import gql from 'graphql-tag';

export class $1 extends Component {
	render() {
		return (
			<View>
				$2
			</View>
		)
	}
}

$1.propTypes = {};

export default $1;
endsnippet

snippet didmount "componentDidMount method" b
componentDidMount() {
	$1
}
endsnippet

snippet construct "React Constructor" b
constructor(props) {
	super(props);
	$1
}
endsnippet

snippet rbind "Bind React Method" b
this.${1:methodName} = this.$1.bind(this);
endsnippet

# Jest snippets

snippet reacttest "Set up testing for React component" b
import React from 'react';
import { shallow } from 'enzyme';
import renderer from 'react-test-renderer';

import ${1:Component name} from './${2:path}';

describe('<$1 />', () => {
	it('renders without crashing', () => {
		const rendered = renderer.create(<$1 />).toJSON();
		expect(rendered).toBeTruthy();
	});
});
endsnippet

snippet jtest "Set up Jest test" b
it('${1:test statement}', () => {
	$2
});
endsnippet
